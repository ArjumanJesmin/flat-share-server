generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String             @id @default(uuid())
  username     String             @unique
  email        String             @unique
  password     String
  flats        Flat[]             @relation("UserFlats")
  requests     FlatShareRequest[] @relation("UserRequests")
  testimonials Testimonial[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

model Admin {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admin")
}

model Flat {
  id          String             @id @default(uuid())
  location    String
  description String
  rentAmount  Float
  bedrooms    Int
  amenities   String
  photos      Photo[]
  ownerId     String
  owner       User               @relation("UserFlats", fields: [ownerId], references: [id])
  requests    FlatShareRequest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("flat")
}

model Photo {
  id        String   @id @default(uuid())
  url       String
  flatId    String
  flat      Flat     @relation(fields: [flatId], references: [id])
  createdAt DateTime @default(now())

  @@map("photo")
}

model FlatShareRequest {
  id             String        @id @default(uuid())
  contactInfo    String
  additionalInfo String
  status         RequestStatus @default(PENDING)
  flatId         String
  flat           Flat          @relation(fields: [flatId], references: [id])
  userId         String
  user           User          @relation("UserRequests", fields: [userId], references: [id])

  createdAt DateTime @default(now())
}

model Testimonial {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  content   String
  createdAt DateTime @default(now())
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}
