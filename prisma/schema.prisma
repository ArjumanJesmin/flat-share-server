generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

// The User model represents regular users
model User {
  id                 String             @id @default(uuid())
  email              String             @unique
  password           String
  role               UserRole
  status             UserStatus         @default(ACTIVE)
  needPasswordChange Boolean            @default(true)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  requests           FlatShareRequest[] @relation("UserRequests")
  testimonials       Testimonial[]
  admin              Admin?
  flatUser           FlatUser?
  Flat               Flat[]

  @@map("user")
}

// The Admin model represents administrators
model Admin {
  id                 String   @id @default(uuid())
  username           String   @unique
  email              String   @unique
  password           String
  needPasswordChange Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [email], references: [email])

  @@map("admin")
}

// The FlatUser model represents users associated with flats
model FlatUser {
  id                 String   @id @default(uuid())
  username           String   @unique
  email              String   @unique
  password           String
  needPasswordChange Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  testimonials Testimonial[]
  user         User          @relation(fields: [email], references: [email])

  @@map("flatUser")
}

model Flat {
  id               String             @id @default(uuid())
  location         String
  description      String
  rentAmount       Float
  bedrooms         Int
  flatPhotos       FlatPhoto[]
  amenities        String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  user             User               @relation(fields: [userId], references: [id])
  userId           String
  FlatShareRequest FlatShareRequest[]

  @@map("flat")
}

model FlatPhoto {
  id       String @id @default(uuid())
  imageUrl String
  flatId   String
  flat     Flat   @relation(fields: [flatId], references: [id])

  @@map("flatPhoto")
}

model FlatShareRequest {
  id             String        @id @default(uuid())
  contactInfo    String
  additionalInfo String
  status         RequestStatus @default(PENDING)
  flatId         String
  flat           Flat          @relation(fields: [flatId], references: [id])
  userId         String
  user           User          @relation("UserRequests", fields: [userId], references: [id])
  createdAt      DateTime      @default(now())

  @@map("flatShareRequest")
}

// The Testimonial model represents testimonials associated with users
model Testimonial {
  id         String    @id @default(uuid())
  content    String
  createdAt  DateTime  @default(now())
  FlatUser   FlatUser? @relation(fields: [flatUserId], references: [id])
  flatUserId String?
  User       User?     @relation(fields: [userId], references: [id])
  userId     String?

  @@map("testimonial")
}
